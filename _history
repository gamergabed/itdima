{"entries":[{"timestamp":1761065564722,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":16,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":192,"length1":43,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":253,"length1":45,"diffs":[[1,"    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"states.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace States {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1761066090365,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":0,"length1":15,"diffs":[[1,"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n"]]},{"start1":121,"length1":0,"diffs":[[1,"enum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n"]]},{"start1":583,"length1":0,"diffs":[[1,"\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n"]]}]}]},{"timestamp":1761066687437,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3,"length1":1,"diffs":[[1,"ok so like \n"]]},{"start1":149,"length1":52,"diffs":[[1,"     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n"]]},{"start1":311,"length1":45,"diffs":[[1,"    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n"]]}]}]},{"timestamp":1761067256965,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":8,"length1":19,"diffs":[[1,""]]},{"start1":138,"length1":68,"diffs":[[1,"     * @param n describe parameter here, eg: ''''''\n"]]},{"start1":256,"length1":19,"diffs":[[1,"\n"]]},{"start1":263,"length1":1,"diffs":[[1,"}\n"]]}]}]},{"timestamp":1761067739402,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":61,"diffs":[[1,"    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA) - Copy\",\n"]]}]},{"type":"edited","filename":"states.ts","patch":[{"start1":89,"length1":19,"diffs":[[1,"namespace States {\n"]]},{"start1":310,"length1":53,"diffs":[[1,""]]},{"start1":316,"length1":175,"diffs":[[1,""]]}]}]},{"timestamp":1761068336890,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":472,"length1":67,"diffs":[[1,"     * @param s Sprite\n"]]},{"start1":503,"length1":67,"diffs":[[1,"    export function DoState(s: Sprite, )\n"]]}]}]},{"timestamp":1761068746583,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":599,"length1":10,"diffs":[[1,"        \n"]]}]}]},{"timestamp":1761070601709,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":116,"length1":8,"diffs":[[1,"     * TODO: describe your function here\n"]]}]}]},{"timestamp":1761070673578,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":116,"length1":134,"diffs":[[1,"     * \n     * @param n describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n"]]},{"start1":214,"length1":69,"diffs":[[1,"    export function LoadStates(n: String) {\n        states = n\n"]]},{"start1":336,"length1":1,"diffs":[[1,""]]},{"start1":344,"length1":173,"diffs":[[1,"     * Handle states for sprite until delay is reached (Run during game ticks for optimal use)\n     * @param s Sprite to handle\n     * @param p Pointer to states\n"]]},{"start1":514,"length1":77,"diffs":[[1,"    export function DoState(s: Sprite, p: Number) {\n"]]}]}]},{"timestamp":1761071316001,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":667,"length1":16,"diffs":[[1,"         \n"]]}]}]},{"timestamp":1761071324799,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":272,"length1":47,"diffs":[[1,"    export function LoadStates(code: String) {\n"]]},{"start1":604,"length1":126,"diffs":[[1,"    export function DoState(sprite: Sprite, pointer: Number) {\n         while \n"]]},{"start1":689,"length1":326,"diffs":[[1,""]]}]}]},{"timestamp":1761071924495,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":238,"diffs":[[1," // Example code"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":215,"length1":68,"diffs":[[1,"        \"states.ts\"\n"]]}]},{"type":"edited","filename":"states.ts","patch":[{"start1":8,"length1":25,"diffs":[[1,"let states = null\n"]]},{"start1":319,"length1":29,"diffs":[[1,"        states = code\n"]]},{"start1":739,"length1":49,"diffs":[[1,"function GetLine(states: tring, line: number) {\n"]]}]},{"type":"added","filename":"images.g.jres","value":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}"},{"type":"added","filename":"images.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myImages {\n\n    helpers._registerFactory(\"image\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"image1\":\n            case \"hero1\":return img`\n. . . . . . f f f f . . . . . . \n. . . . f f f 2 2 f f f . . . . \n. . . f f f 2 2 2 2 f f f . . . \n. . f f f e e e e e e f f f . . \n. . f f e 2 2 2 2 2 2 e e f . . \n. . f e 2 f f f f f f 2 e f . . \n. . f f f f e e e e f f f f . . \n. f f e f b f 4 4 f b f e f f . \n. f e e 4 1 f d d f 1 4 e e f . \n. . f e e d d d d d d e e f . . \n. . . f e e 4 4 4 4 e e f . . . \n. . e 4 f 2 2 2 2 2 2 f 4 e . . \n. . 4 d f 2 2 2 2 2 2 f d 4 . . \n. . 4 4 f 4 4 5 5 4 4 f 4 4 . . \n. . . . . f f f f f f . . . . . \n. . . . . f f . . f f . . . . . \n`;\n            case \"image2\":\n            case \"hero2\":return img`\n. . . . . . f f f f . . . . . . \n. . . . f f e e e e f f . . . . \n. . . f e e e f f e e e f . . . \n. . f f f f f 2 2 f f f f f . . \n. . f f e 2 e 2 2 e 2 e f f . . \n. . f e 2 f 2 f f 2 f 2 e f . . \n. . f f f 2 2 e e 2 2 f f f . . \n. f f e f 2 f e e f 2 f e f f . \n. f e e f f e e e e f e e e f . \n. . f e e e e e e e e e e f . . \n. . . f e e e e e e e e f . . . \n. . e 4 f f f f f f f f 4 e . . \n. . 4 d f 2 2 2 2 2 2 f d 4 . . \n. . 4 4 f 4 4 4 4 4 4 f 4 4 . . \n. . . . . f f f f f f . . . . . \n. . . . . f f . . f f . . . . . \n`;\n            case \"image3\":\n            case \"hero3\":return img`\n. . . . f f f f f f . . . . . . \n. . . f 2 f e e e e f f . . . . \n. . f 2 2 2 f e e e e f f . . . \n. . f e e e e f f e e e f . . . \n. f e 2 2 2 2 e e f f f f . . . \n. f 2 e f f f f 2 2 2 e f . . . \n. f f f e e e f f f f f f f . . \n. f e e 4 4 f b e 4 4 e f f . . \n. . f e d d f 1 4 d 4 e e f . . \n. . . f d d d d 4 e e e f . . . \n. . . f e 4 4 4 e e f f . . . . \n. . . f 2 2 2 e d d 4 . . . . . \n. . . f 2 2 2 e d d e . . . . . \n. . . f 5 5 4 f e e f . . . . . \n. . . . f f f f f f . . . . . . \n. . . . . . f f f . . . . . . . \n`;\n            case \"image4\":\n            case \"hero4\":return img`\n. . . . . . f f f f f f . . . . \n. . . . f f e e e e f 2 f . . . \n. . . f f e e e e f 2 2 2 f . . \n. . . f e e e f f e e e e f . . \n. . . f f f f e e 2 2 2 2 e f . \n. . . f e 2 2 2 f f f f e 2 f . \n. . f f f f f f f e e e f f f . \n. . f f e 4 4 e b f 4 4 e e f . \n. . f e e 4 d 4 1 f d d e f . . \n. . . f e e e 4 d d d d f . . . \n. . . . f f e e 4 4 4 e f . . . \n. . . . . 4 d d e 2 2 2 f . . . \n. . . . . e d d e 2 2 2 f . . . \n. . . . . f e e f 4 5 5 f . . . \n. . . . . . f f f f f f . . . . \n. . . . . . . f f f . . . . . . \n`;\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"animation\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n    helpers._registerFactory(\"song\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1761072958901,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3,"length1":13,"diffs":[[1,"\n"]]}]}]},{"timestamp":1761073745626,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":16,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1761073749576,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3,"length1":724,"diffs":[[1,"Codepointers\n\n"]]}]}]},{"timestamp":1761074348822,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":379,"length1":49,"diffs":[[1,"- FaceTarget          (): Sets velocity to face target\n"]]}]}]},{"timestamp":1761074353869,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":718,"length1":8,"diffs":[[1,"- \n"]]}]}]},{"timestamp":1761075714272,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":718,"length1":14,"diffs":[[1,"- Force\n"]]}]}]},{"timestamp":1761075720529,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":617,"length1":224,"diffs":[[1,""]]},{"start1":718,"length1":284,"diffs":[[1,"- ForceTarget\n"]]}]}]},{"timestamp":1761076319442,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":841,"length1":63,"diffs":[[1,""]]},{"start1":1226,"length1":53,"diffs":[[1,""]]}]}]},{"timestamp":1761076419088,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1342,"length1":3,"diffs":[[1,""]]}]}]},{"timestamp":1761081849804,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1342,"length1":13,"diffs":[[1,"- \n"]]}]}]},{"timestamp":1761081854687,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1296,"length1":215,"diffs":[[1,"- SpriteGhost: Turns off colisions of sprites\n- WallGhost:\n"]]}]}]},{"timestamp":1761082125201,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1511,"length1":92,"diffs":[[1,""]]}]}]},{"timestamp":1761082742567,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1508,"length1":7,"diffs":[[1,"- \n"]]}]}]},{"timestamp":1761082744413,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1508,"length1":32,"diffs":[[1,"- Harm\n"]]},{"start1":1607,"length1":46,"diffs":[[1,""]]},{"start1":1636,"length1":23,"diffs":[[1,""]]},{"start1":1958,"length1":53,"diffs":[[1,"        console.log(\"-- ITDIMA -- : Loaded string!\")\n"]]},{"start1":2026,"length1":299,"diffs":[[1,""]]}]}]},{"timestamp":1761083233826,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1682,"length1":21,"diffs":[[1,""]]},{"start1":1707,"length1":36,"diffs":[[1,"let currentActors = []\n"]]}]}]},{"timestamp":1761083541220,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1695,"length1":17,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1761084472852,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1695,"length1":18,"diffs":[[1,"    SpriteGhost:\n"]]}]}]},{"timestamp":1761084474162,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1695,"length1":149,"diffs":[[1,"    SpriteGhost: \n"]]},{"start1":2323,"length1":46,"diffs":[[1,"    export function LoadActors(code: Array) {\n"]]}]}]},{"timestamp":1761084663309,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1808,"length1":47,"diffs":[[1,"    EXTRA2-,\n    EXTRA3,\n    EXTRA4\n"]]},{"start1":1909,"length1":133,"diffs":[[1,""]]}]}]},{"timestamp":1761085262587,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":1920,"length1":0,"diffs":[[1,"if (Flags.SPRITEGHOST+Flags.WALLGHOST+Flags.INVIS+Flags.MISSILE+Flags.NOTARGET+Flags.HARMABLE+Flags.EXTRA1+Flags.EXTRA2 == 256) {c}\n\n"]]},{"start1":2999,"length1":103,"diffs":[[1,"         for (let count = 255; count>0; count--) {\n\n         }\n"]]}]}]},{"timestamp":1761085914764,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":2977,"length1":2,"diffs":[[1,"\n"]]}]}]},{"timestamp":1761085926149,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":2977,"length1":273,"diffs":[[1," \n"]]}]}]},{"timestamp":1761086302704,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":2946,"length1":18,"diffs":[[1,"            \n"]]},{"start1":2978,"length1":76,"diffs":[[1,"\nfunction Split(input: string, seperator: string) {\n"]]},{"start1":3219,"length1":51,"diffs":[[1,"        else if () {}\n"]]},{"start1":3247,"length1":18,"diffs":[[1,""]]},{"start1":3249,"length1":3,"diffs":[[1,""]]}]}]},{"timestamp":1761086869403,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":2866,"length1":108,"diffs":[[1,""]]},{"start1":2896,"length1":36,"diffs":[[1,""]]},{"start1":2946,"length1":100,"diffs":[[1,"            curre\n"]]}]}]},{"timestamp":1761087486227,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3149,"length1":43,"diffs":[[1,"           sprite.setImage(assets.image)\n"]]}]}]},{"timestamp":1761087487834,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":126,"length1":70,"diffs":[[1,"\r\n"]]}]},{"type":"edited","filename":"states.ts","patch":[{"start1":1858,"length1":99,"diffs":[[1,"let currentStates = null\n"]]},{"start1":2866,"length1":167,"diffs":[[1,"        if (currentStates == null) {\n            game.splash(\"ITDIMA\", \"States aren't loaded :(\")\n        }\n"]]},{"start1":3149,"length1":51,"diffs":[[1,"           sprite.setImage(assets.image())\n"]]}]}]},{"timestamp":1761088073143,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3098,"length1":1,"diffs":[[1,"        \n"]]},{"start1":3333,"length1":11,"diffs":[[1,"        }\n"]]}]}]},{"timestamp":1761089526135,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3325,"length1":10,"diffs":[[1,"         }\n"]]}]}]},{"timestamp":1761089535875,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"states.ts","patch":[{"start1":3215,"length1":196,"diffs":[[1,"           argus = GetLine(currentStates,point).split(':')\n           sprite.setImage(assets.image(argus[0]))\n"]]}]}]},{"timestamp":1761090093180,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":108,"length1":98,"diffs":[[1,"        \"device\": \"*\"\n"]]}]},{"type":"edited","filename":"states.ts","patch":[{"start1":2682,"length1":503,"diffs":[[1,""]]},{"start1":3397,"length1":38,"diffs":[[1,"            n\n"]]}]}]},{"timestamp":1761090692931,"editorVersion":"2.0.60","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":366,"length1":44,"diffs":[[1,""]]}]},{"type":"edited","filename":"states.ts","patch":[{"start1":2944,"length1":104,"diffs":[[1,"        sprites.setDataNumber(sprite, \"StateDelay\", 0)\n        sprites.setDataNumber(sprite, \"StateDelay\", 0)\n        sprite.StateDelay = 0\n        sprite.StatePointer = 0\n        sprite.StateFlags = 0\n        sprite.HP = 100\n"]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1761065564721,"editorVersion":"2.0.60","text":{"main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1761067546375,"editorVersion":"2.0.60","text":{"main.ts":" // Example code","README.md":" ","assets.json":"","states.ts":"/*\n\n*/\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace States {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(n: String) {\n\n    }\n}\n","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761070601709,"editorVersion":"2.0.60","text":{"main.ts":" // Example code","README.md":" ","assets.json":"","states.ts":"/*\n\n*/\n\nlet states = null\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(n: String) {\n        states = n\n        console.log(\"-- ITDIMA -- : Loaded string!\")\n    }\n    /**\n     * Handle states for sprite until delay is reached (Run during game ticks for optimal use)\n     * @param s Sprite to handle\n     * @param p Pointer to states\n     */\n    export function DoState(s: Sprite, p: Number) {\n        \n    }\n}","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761072403354,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n\r\nlet mySprite = sprites.create(assets.image`jer`)","README.md":" ","assets.json":"","states.ts":"/*\n\n*/\n\nlet currentStates = null\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded string!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n         for (let count = 255; count>0; count--) {\n\n         }\n    }\n}\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761074203634,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n\r\nITDIMA.LoadStates(states)\r\n\r\nscene.setBackgroundColor(1)\r\nlet mySprite = sprites.create(assets.image`hero1`,0)","README.md":" ","assets.json":"","states.ts":"/*\nCodepointers:\n- SetPos        (X, Y)\n- ChangePos     (X, Y)\n- SetVel        (X, Y)\n- ChangeVel     (X, Y)\n- SetAcl        (X, Y)\n- ChangeAcl     (X, Y)\n- SetFct        (X, Y)\n- ChangeFct     (X, Y)\n- Dash          (Speed, Direction): Sets velocity to [Speed] and [Direction] provided (Uses Radians)\n- Search        (Distance, Type): Sets target to closest of Type spesified\n- Face          (): Sets velocity to face target\n- Jump          (Chance, State): Jumps to [State] if the random number generated is less then [Chance]\n- JumpIfCloser  (Distance, State): Jumps to [State] if target is less then [Distance]\n*/\n\nlet currentStates = null\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded string!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n         for (let count = 255; count>0; count--) {\n\n         }\n    }\n}\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761076047736,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n\r\nITDIMA.LoadStates(states)\r\n\r\nscene.setBackgroundColor(1)\r\nlet mySprite = sprites.create(assets.image`hero1`,0)","README.md":" ","assets.json":"","states.ts":"/*\nCodepointers:\n- SetPos        (X, Y)\n- ChangePos     (X, Y)\n- SetVel        (X, Y)\n- ChangeVel     (X, Y)\n- SetAcl        (X, Y)\n- ChangeAcl     (X, Y)\n- SetFct        (X, Y)\n- ChangeFct     (X, Y)\n- Dash          (Speed, Direction): Sets velocity to [Speed] and [Direction] provided (Uses Radians)\n- Search        (Distance, Type): Sets target to closest of [Type] spesified\n- FaceTarget    (): Sets velocity to face target\n- Jump          (Chance, State): Jumps to [State] if the random number generated is less then [Chance]\n- JumpIfCloser  (Distance, State): Jumps to [State] if target is less then [Distance]\n- JumpIfButtons (Buttons, State): Jumps to [State] if buttons provided are all pressed (Only checks buttons from player provided in sprite)\n- JumpIfHitWall (Direction, State): Jumps to [State] if hitting wall in direction\n- Fire          (Projectile Type, Direction): Creates a projectile facing [Direction] (Uses radians)\n- ForceTarget   (Distance, Direction): Sets the position of the target to a certain [Distance] and [Direction] away\n*/\n\nlet currentStates = null\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded string!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n         for (let count = 255; count>0; count--) {\n\n         }\n    }\n}\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761081849804,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n\r\nITDIMA.LoadStates(states)\r\n\r\nscene.setBackgroundColor(1)\r\nlet mySprite = sprites.create(assets.image`hero1`,0)","README.md":" ","assets.json":"","states.ts":"/*\nCodepointers:\n- SetPos        (X, Y)\n- ChangePos     (X, Y)\n- SetVel        (X, Y)\n- ChangeVel     (X, Y)\n- SetAcl        (X, Y)\n- ChangeAcl     (X, Y)\n- SetFct        (X, Y)\n- ChangeFct     (X, Y)\n- Dash          (Speed, Direction): Sets velocity to [Speed] and [Direction] provided (Uses Radians)\n- Search        (Distance, Type): Sets target to closest of [Type] spesified\n- FaceTarget    (): Sets velocity to face target\n- Jump          (Chance, State): Jumps to [State] if the random number generated is less then [Chance]\n- JumpIfCloser  (Distance, State): Jumps to [State] if target is less then [Distance]\n- JumpIfButtons (Buttons, State): Jumps to [State] if buttons provided are all pressed (Only checks buttons from player provided in sprite)\n- JumpIfHitWall (Direction, State): Jumps to [State] if hitting wall in [Direction]\n- JumpIfFlag    (Flag, State): Jumps to [State] if flag is set\n- Fire          (Projectile Type, Direction): Creates a projectile facing [Direction] (Uses radians)\n- ForceTarget   (Distance, Direction): Sets the position of the target to a certain [Distance] and [Direction] away\n- Explode       (Damage, Distance): Deal [Damage] to sprites in [Distance]\n- SetFlag       (Flag, Boolean): Turns On or Off a [Flag]\n- End           (): Destroy itself\nFlags:\n- SpriteGhost: Turns off colisions of sprites\n*/\n\nlet currentStates = null\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded string!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n         for (let count = 255; count>0; count--) {\n\n         }\n    }\n}\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761084472852,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n\r\nITDIMA.LoadStates(states)\r\n\r\nscene.setBackgroundColor(1)\r\nlet mySprite = sprites.create(assets.image`hero1`,0)","README.md":" ","assets.json":"","states.ts":"/*\nCodepointers:\n- SetPos        (X, Y)\n- ChangePos     (X, Y)\n- SetVel        (X, Y)\n- ChangeVel     (X, Y)\n- SetAcl        (X, Y)\n- ChangeAcl     (X, Y)\n- SetFct        (X, Y)\n- ChangeFct     (X, Y)\n- Dash          (Speed, Direction): Sets velocity to [Speed] and [Direction] provided (Uses Radians)\n- Search        (Distance, Type): Sets target to closest of [Type] spesified\n- FaceTarget    (): Sets velocity to face target\n- Jump          (Chance, State): Jumps to [State] if the random number generated is less then [Chance]\n- JumpIfCloser  (Distance, State): Jumps to [State] if target is less then [Distance]\n- JumpIfButtons (Buttons, State): Jumps to [State] if buttons provided are all pressed (Only checks buttons from player provided in sprite)\n- JumpIfHitWall (Direction, State): Jumps to [State] if hitting wall in [Direction]\n- JumpIfFlag    (Flag, State): Jumps to [State] if flag is set\n- Fire          (Projectile Type, Direction): Creates a projectile facing [Direction] (Uses radians)\n- ForceTarget   (Distance, Direction): Sets the position of the target to a certain [Distance] and [Direction] away\n- Explode       (Damage, Distance): Deal [Damage] to sprites in [Distance]\n- SetFlag       (Flag, Boolean): Turns On or Off a [Flag]\n- End           (): Destroy itself\nFlags:\n- SpriteGhost: Ignore sprite collisions\n- WallGhost: Ignore wall collisions\n- Invis: Stops being rendered\n- Missile: Moves at a constant speed | Starts with the spesified speed\n- NoTarget: Cannot become a target\n- Harmable: Can be dealt Damage\n- Extra1: Does nothing\n- Extra2: Does nothing\n- Extra3: Does nothing\n- Extra4: Does nothing\n- Extra5: Does nothing\n- Extra6: Does nothing\n*/\n\nenum Flags {\n    \n}\n\nlet currentStates = null\nlet currentActors = [] // [100,0,0]\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded states!\")\n    }\n\n    /**\n     * Load Actor code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadActors(code: Array) {\n        currentActors = code\n        console.log(\"-- ITDIMA -- : Loaded actors!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n         for (let count = 255; count>0; count--) {\n\n         }\n    }\n}\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761086274702,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n\r\nITDIMA.LoadStates(states)\r\n\r\nscene.setBackgroundColor(1)\r\nlet mySprite = sprites.create(assets.image`hero1`,0)","README.md":" ","assets.json":"","states.ts":"/*\nCodepointers:\n- SetPos        (X, Y)\n- ChangePos     (X, Y)\n- SetVel        (X, Y)\n- ChangeVel     (X, Y)\n- SetAcl        (X, Y)\n- ChangeAcl     (X, Y)\n- SetFct        (X, Y)\n- ChangeFct     (X, Y)\n- Dash          (Speed, Direction): Sets velocity to [Speed] and [Direction] provided (Uses Radians)\n- Search        (Distance, Type): Sets target to closest of [Type] spesified\n- FaceTarget    (): Sets velocity to face target\n- Jump          (Chance, State): Jumps to [State] if the random number generated is less then [Chance]\n- JumpIfCloser  (Distance, State): Jumps to [State] if target is less then [Distance]\n- JumpIfButtons (Buttons, State): Jumps to [State] if buttons provided are all pressed (Only checks buttons from player provided in sprite)\n- JumpIfHitWall (Direction, State): Jumps to [State] if hitting wall in [Direction]\n- JumpIfFlag    (Flag, State): Jumps to [State] if flag is set\n- Fire          (Projectile Type, Direction): Creates a projectile facing [Direction] (Uses radians)\n- ForceTarget   (Distance, Direction): Sets the position of the target to a certain [Distance] and [Direction] away\n- Explode       (Damage, Distance): Deal [Damage] to sprites in [Distance]\n- SetFlag       (Flag, Boolean): Turns On or Off a [Flag]\n- End           (): Destroy itself\nFlags:\n- SpriteGhost: Ignore sprite collisions\n- WallGhost: Ignore wall collisions\n- Invis: Stops being rendered\n- Missile: Moves at a constant speed | Starts with the spesified speed\n- NoTarget: Cannot become a target\n- Harmable: Can be dealt Damage\n- Extra1: Does nothing\n- Extra2: Does nothing\n- Extra3: Does nothing\n- Extra4: Does nothing\n- Extra5: Does nothing\n- Extra6: Does nothing\n*/\n\nenum Flags {\n    SPRITEGHOST=1,\n    WALLGHOST=2,\n    INVIS=4,\n    MISSILE=8,\n    NOTARGET=16,\n    HARMABLE=32,\n    EXTRA1=64,\n    EXTRA2=128,\n    EXTRA3=256,\n    EXTRA4=512\n}\n\nlet currentStates = null\nlet currentActors = [] // [100,0,0]\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded states!\")\n    }\n\n    /**\n     * Load Actor code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadActors(code: any[]) {\n        currentActors = code\n        console.log(\"-- ITDIMA -- : Loaded actors!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n        let argus: any[] = []\n        for (let count = 255; count>0; count--) {\n            \n        }\n    }\n}\n\n\nfunction Split(input: string, seperator: string) {\n    let output: string[] = []\n    let current_item: string = ''\n    for (let x=0; x<input.length; x++) {\n        if (input.charAt(x) == seperator) {output.push(currentItem); currentItem}\n    }\n}\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1761089526135,"editorVersion":"2.0.60","text":{"main.ts":"// Example code\r\nlet states: string = `\r\nhero1:1:1:null:0:0;\r\nhero2:1:2:null:0:0;\r\nhero3:1:3:null:0:0;\r\nhero4:1:0:null:0:0;`\r\n// [Image name]:[Length]:[Next state]:[Codepointer]:[Arg 1]:[Arg 2];\r\nITDIMA.LoadStates(states)\r\n\r\nscene.setBackgroundColor(1)\r\nlet mySprite = sprites.create(assets.image`hero1`,0)","README.md":" ","assets.json":"","states.ts":"/*\nCodepointers:\n- SetPos        (X, Y)\n- ChangePos     (X, Y)\n- SetVel        (X, Y)\n- ChangeVel     (X, Y)\n- SetAcl        (X, Y)\n- ChangeAcl     (X, Y)\n- SetFct        (X, Y)\n- ChangeFct     (X, Y)\n- Dash          (Speed, Direction): Sets velocity to [Speed] and [Direction] provided (Uses Radians)\n- Search        (Distance, Type): Sets target to closest of [Type] spesified\n- FaceTarget    (): Sets velocity to face target\n- Jump          (Chance, State): Jumps to [State] if the random number generated is less then [Chance]\n- JumpIfCloser  (Distance, State): Jumps to [State] if target is less then [Distance]\n- JumpIfButtons (Buttons, State): Jumps to [State] if buttons provided are all pressed (Only checks buttons from player provided in sprite)\n- JumpIfHitWall (Direction, State): Jumps to [State] if hitting wall in [Direction]\n- JumpIfFlag    (Flag, State): Jumps to [State] if flag is set\n- Fire          (Projectile Type, Direction): Creates a projectile facing [Direction] (Uses radians)\n- ForceTarget   (Distance, Direction): Sets the position of the target to a certain [Distance] and [Direction] away\n- Explode       (Damage, Distance): Deal [Damage] to sprites in [Distance]\n- SetFlag       (Flag, Boolean): Turns On or Off a [Flag]\n- End           (): Destroy itself\nFlags:\n- SpriteGhost: Ignore sprite collisions\n- WallGhost: Ignore wall collisions\n- Invis: Stops being rendered\n- Missile: Moves at a constant speed | Starts with the spesified speed\n- NoTarget: Cannot become a target\n- Harmable: Can be dealt Damage\n- Extra1: Does nothing\n- Extra2: Does nothing\n- Extra3: Does nothing\n- Extra4: Does nothing\n- Extra5: Does nothing\n- Extra6: Does nothing\n*/\n\nenum Flags {\n    SPRITEGHOST=1,\n    WALLGHOST=2,\n    INVIS=4,\n    MISSILE=8,\n    NOTARGET=16,\n    HARMABLE=32,\n    EXTRA1=64,\n    EXTRA2=128,\n    EXTRA3=256,\n    EXTRA4=512\n}\n\n// [Image name]:[Length]:[Next state]:[Codepointer]:[Arg 1]:[Arg 2];\nlet currentStates: any = null\nlet currentActors = [] // [100,0,0]\n\n/**\n * State blocks\n */\n//% weight=100 color=#f2c11d icon=\"âš™\"\nnamespace ITDIMA {\n    /**\n     * Load State code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadStates(code: string) {\n        currentStates = code\n        console.log(\"-- ITDIMA -- : Loaded states!\")\n    }\n\n    /**\n     * Load Actor code (I recommend using it at the beginning)\n     * @param code describe parameter here, eg: '''PlayRWalk:5:0:0;'''\n     */\n    //% block\n    export function LoadActors(code: any[]) {\n        currentActors = code\n        console.log(\"-- ITDIMA -- : Loaded actors!\")\n    }\n\n    /**\n     * Handle states for sprite until delay is reached (I recommend calling during game ticks)\n     * @param sprite Sprite to handle\n     * @param pointer Pointer to states\n     */\n    //% block\n    export function DoState(sprite: Sprite, pointer: number) {\n        if (currentStates == null) { game.splash(\"ITDIMA\", \"States aren't loaded :(\")\n        } else if (sprite.StateDelay > 0) {sprite.StateDelay--; return}\n        \n        let argus: any[] = []\n        let point: number = pointer\n        for (let count = 255; count>0; count--) {\n           argus = GetLine(currentStates,point).split(':')\n           sprite.setImage(assets.image(argus[0]))\n        }\n    }\n}\n\n/* // this is useless :)\nfunction split(input: string, seperator: string) {\n    let output: string[] = []\n    let currentItem: string = ''\n    for (let x=0; x<input.length; x++) {\n        if (input.charAt(x) == seperator) {output.push(currentItem); currentItem=''}\n        else {currentItem.concat(input.charAt(x))}\n    }\n    return output\n}\n*/\n\nfunction GetLine(states: string, line: number) {\n    let count = 0\n    let begin = 0\n    for (let x=0; x<states.length; x++) {\n        if (states.charAt(x) == ';') {count++}\n        if (count == line-1) {begin = x}\n        if (count == line) {\n            return states.substr(begin,x-begin)\n        }\n    }\n    return null\n}","images.g.jres":"{\n    \"image1\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD/Lv/k/v8A8O/yv9EuQv//4vL+3yRC/y/i8k7dJFIPL+LyTt0kUg//4vL+3yRC//Dv8r/RLkL/8P8u/+T+/wAA/+7v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero1\"\n    },\n    \"image2\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAPAPAAAAAPD///7gRAAA/+/v7k9NAPD+Lv/v/v8A8P7yIu/+Qv/v/i7y7v5C/+8v8u7u/kIP7y/y7u7+Qg/v/i7y7v5C//D+8iLv/kL/8P4u/+7+/wAA/+/v7k9NAADw///+4EQAAAAA8A8AAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero2\"\n    },\n    \"image3\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAA//8AAAAAAP8u7w8AAADw4uLv/v//AC/i8k7dLlIP/+LyTt0kUg/v7/L+3yRC/+/+/r/R5P7/7/4u70Te7f/v7i9P7d7tD/DuL0/kT/4A8O/v7+4PAAAA/////gAAAAAAAP8PAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero3\"\n    },\n    \"image4\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/w8AAAAA/////gAAAPDv7+/uDwAA8O4vT+RP/gDv7i9P7d7tD+/+Lu9E3u3/7/7+v9Hk/v/v7/L+3yRC///i8k7dJFIPL+LyTt0uUg/w4uLv/v//AAD/Lu8PAAAAAAD//wAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"displayName\": \"hero4\"\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myImages\"\n    }\n}","images.g.ts":"","pxt.json":"{\n    \"name\": \"Is This Dehacked In Makecode Arcade? (ITDIMA)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"states.ts\",\n        \"images.g.jres\",\n        \"images.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1761090804277}